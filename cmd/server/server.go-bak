package main

import (
	"fmt"
	"net"
	"net/http"
	_ "net/http/pprof"

	"github.com/codingWhat/go-cowboy/frame"
	"github.com/codingWhat/go-cowboy/metrics"
	"github.com/codingWhat/go-cowboy/packet"
)

func main() {
	listener, err := net.Listen("tcp", ":8888")
	if err != nil {
		panic(err)
	}

	go func() {
		err := http.ListenAndServe(":6060", nil)
		if err != nil {
			panic(err)
			return
		}
	}()

	fmt.Println("server start ....")
	for {
		conn, err := listener.Accept()
		if err != nil {
			panic(err)
			return
		}

		go handleConn(conn)
	}

}

func handleConn(conn net.Conn) {
	defer func() {
		conn.Close()
		metrics.ClientConnected.Dec()
	}()

	//rBuf := bufio.NewReader(conn)
	//wBuf := bufio.NewWriter(conn)
	metrics.ClientConnected.Inc()
	codec := &frame.MyFrameCodec{}
	for {
		payload, err := codec.Decode(conn)
		//payload, err := codec.Decode(rBuf)
		if err != nil {
			return
		}

		metrics.ReqRecvTotal.Add(1) // 收到并解码一个消息请求，ReqRecvTotal消息计数器加1
		bytes, err := handlePacket(payload)
		if err != nil {
			return
		}
		//fmt.Println("packet---->", bytes, string(bytes))

		// write ack frame to the connection
		err = codec.Encode(conn, bytes)
		//err = codec.Encode(wBuf, bytes)
		if err != nil {
			fmt.Println("handleConn: frame encode error:", err)
			return
		}
		metrics.RspSendTotal.Add(1) // 返回响应后，RspSendTotal消息计数器减1
	}
}

func handlePacket(framePayload []byte) (ackFramePayload []byte, err error) {
	var p packet.Packet
	p, err = packet.Decode(framePayload)
	if err != nil {
		fmt.Println("handleConn: packet decode error:", err)
		return
	}

	switch p.(type) {
	case *packet.Submit:
		submit := p.(*packet.Submit)
		//fmt.Printf("recv submit: id = %s, payload=%s\n", submit.ID, string(submit.Payload))
		submitAck := &packet.SubmitAck{
			ID:     submit.ID,
			Result: 0,
		}
		ackFramePayload, err = packet.Encode(submitAck)
		if err != nil {
			fmt.Println("handleConn: packet encode error:", err)
			return nil, err
		}
		return ackFramePayload, nil
	default:
		return nil, fmt.Errorf("unknown packet type")
	}
}
